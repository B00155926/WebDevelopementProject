<?php
require_once 'Employee.php';
require_once 'Product.php';

class Order {
    private $orderId;
    private $employee;
    private $products;
    private $pdo;

    public function __construct($pdo) {
        $this->pdo = $pdo;
        $this->products = array(); // Initialise products array
    }

    // Setter method for employee
    public function setEmployee(Employee $employee) {
        $this->employee = $employee;
    }

    // Getter method for employee
    public function getEmployee() {
        return $this->employee;
    }

    // Method to add product to the order
    public function addProduct(Product $product) {
        $this->products[] = $product;
    }

    // Method to remove product from the order
    public function removeProduct(Product $product) {
        // Search for product in the array and remove it
        $index = array_search($product, $this->products);
        if ($index !== false) {
            unset($this->products[$index]);
        }
    }

    // Getter method for products
    public function getProducts() {
        return $this->products;
    }

    // Method to calculate total order price
    public function calculateTotal() {
        $total = 0;
        foreach ($this->products as $product) {
            $total += $product->getPrice();
        }
        return $total;
    }

    // Method to save order to database
    public function saveToDatabase() {
        try {
            // Insert order details into the database
            $sql = "INSERT INTO orders (employee_id, total_price) VALUES (?, ?)";
            $stmt = $this->pdo->prepare($sql);
            $stmt->execute([$this->employee->getEmployeeId(), $this->calculateTotal()]);

            // Retrieve the order ID generated by the database
            $this->orderId = $this->pdo->lastInsertId();

            // Insert order items into the order_items table
            foreach ($this->products as $product) {
                $sql = "INSERT INTO order_items (order_id, product_id) VALUES (?, ?)";
                $stmt = $this->pdo->prepare($sql);
                $stmt->execute([$this->orderId, $product->getProductId()]);
            }

            return true; // Return true on success
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false; // Return false on error
        }
    }
}
?>
